on: [push]
name: Test and release

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    container: maven:3-eclipse-temurin-17
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: letmein
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install dependencies and run tests
        run: mvn clean install
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: letmein
          POSTGRES_DB: test_db
      - name: Upload jar file
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v1
        with:
          name: jar
          path: target/netcheck.jar
      - name: Fetch SPA
        if: github.ref == 'refs/heads/master'
        uses: wei/wget@v1
        with:
          args: -O spa-release.zip https://github.com/memphisx/netcheck-frontend/releases/download/0.8.2/spa-release.zip
      - name: Decompress SPA
        if: github.ref == 'refs/heads/master'
        uses: TonyBogdanov/zip@1.0
        with:
          args: unzip -qq ./spa-release.zip -d ./src/main/resources/static
      - name: Install dependencies and run tests
        if: github.ref == 'refs/heads/master'
        run: mvn clean install
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgresql
          POSTGRES_PASSWORD: letmein
          POSTGRES_DB: test_db
      - name: Upload jar file
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v1
        with:
          name: jar-with-ui
          path: target/netcheck.jar


  release:
    name: Publish Github Release
    runs-on: ubuntu-latest
    container: golang
    needs: unit-tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download jar file
        uses: actions/download-artifact@v1
        with:
          name: jar
      - name: Download jar file with bundled UI
        uses: actions/download-artifact@v1
        with:
          name: jar-with-ui
      - name: Display structure of downloaded files
        run: ls -R
      - name: Publish Release on GitHub
        run: |
          mv ./jar-with-ui/netcheck.jar ./jar/netcheck-with-ui.jar
          go install github.com/tcnksm/ghr@latest
          ghr -t ${{ secrets.GITHUB_TOKEN }} -u ${GITHUB_ACTOR} -r ${{ github.event.repository.name }} -c ${GITHUB_SHA} -delete `cat ./version.txt` ./jar/



  push-to-dockerhub:
    name: Publish docker images to hub.docker.com
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: install buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Download jar file
        uses: actions/download-artifact@v1
        with:
          name: jar
      - name: Prepare jar file
        run: |
          ls -R
          mkdir ./target/
          mv ./jar/netcheck.jar ./target/netcheck.jar
      - name: build the image
        run: |
          docker buildx build --push --tag ${{ secrets.DOCKER_IMAGE_NAME }}:latest --tag ${{ secrets.DOCKER_IMAGE_NAME }}:`cat ./version.txt` --platform linux/amd64,linux/arm/v7,linux/arm64 .
      - name: build the openj9 image
        run: |
          docker buildx build --file ./amd64.openj9.Dockerfile --push --tag ${{ secrets.DOCKER_IMAGE_NAME }}:latest-openj9 --tag ${{ secrets.DOCKER_IMAGE_NAME }}:`cat ./version.txt`-openj9 --platform linux/amd64 .
          

  push-dev-build-to-dockerhub:
    name: Publish develop images to hub.docker.com
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: install buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Download jar file
        uses: actions/download-artifact@v1
        with:
          name: jar
      - name: Prepare jar file
        run: |
          ls -R
          mkdir ./target/
          mv ./jar/netcheck.jar ./target/netcheck.jar
      - name: build the image
        run: |
          docker buildx build --push --tag ${{ secrets.DOCKER_IMAGE_NAME }}:dev --tag ${{ secrets.DOCKER_IMAGE_NAME }}:build-${{github.run_number}} --platform linux/amd64,linux/arm/v7,linux/arm64 .
      - name: build the openj9 image
        run: |
          docker buildx build --file ./amd64.openj9.Dockerfile --push --tag ${{ secrets.DOCKER_IMAGE_NAME }}:dev-openj9 --tag ${{ secrets.DOCKER_IMAGE_NAME }}:build-${{github.run_number}}-openj9 --platform linux/amd64 .

  push-ui-bundles-to-dockerhub:
    name: Publish docker images to hub.docker.com
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      - name: install buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - name: login to docker hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Download jar file
        uses: actions/download-artifact@v1
        with:
          name: jar-with-ui
      - name: Display structure of downloaded files
        run: | 
          ls -R
          mkdir ./target/
          mv ./jar-with-ui/netcheck.jar ./target/netcheck.jar
      - name: build the bundled image
        run: |
          docker buildx build --push --tag ${{ secrets.BUNDLED_DOCKER_IMAGE_NAME }}:latest --tag ${{ secrets.BUNDLED_DOCKER_IMAGE_NAME }}:`cat ./version.txt` --platform linux/amd64,linux/arm/v7,linux/arm64 .
      - name: build the bundled openj9 image
        run: |
          docker buildx build --file ./amd64.openj9.Dockerfile --push --tag ${{ secrets.BUNDLED_DOCKER_IMAGE_NAME }}:latest-openj9 --tag ${{ secrets.BUNDLED_DOCKER_IMAGE_NAME }}:`cat ./version.txt`-openj9 --platform linux/amd64 .